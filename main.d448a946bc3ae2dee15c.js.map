{"version":3,"sources":["webpack:///./templates/tеmplate-clock.hbs","webpack:///./js/menu-theme.js","webpack:///./js/timer.js","webpack:///./js/menu-timer.js","webpack:///./js/refs.js"],"names":["Handlebars","module","exports","template","container","depth0","helpers","partials","data","Theme","changeTheme","add","rem","refs","body","classList","replace","localStorage","setItem","getItem","input","checked","addEventListener","target","CountdownTimer","selector","targetDate","onTick","this","start","updateTime","setInterval","pad","value","String","padStart","padDays","getTimeComponents","time","days","Math","floor","hours","mins","secs","velTime","getTime","Date","now","clock","timeClock","timerContainer","insertAdjacentHTML","spanDay","innerHTML","spanHours","spanMins","spanSecs","document","querySelector"],"mappings":"uGAAA,IAAIA,EAAa,EAAQ,QAEzBC,EAAOC,SAAWF,EAAoB,SAAKA,GAAYG,SAAS,CAAC,SAAW,CAAC,EAAE,YAAY,KAAO,SAASC,EAAUC,EAAOC,EAAQC,EAASC,GACzI,MAAO,mCACT,SAAU,K,gGCHHC,EACE,cADFA,EAEC,aAaR,SAASC,EAAYC,EAAKC,GACxBC,IAAKC,KAAKC,UAAUC,QAAQJ,EAAKD,GACjCM,aAAaC,QAAQ,QAASP,GAZhCE,IAAKC,KAAKC,UAAUJ,IACgB,OAAlCM,aAAaE,QAAQ,SACjBV,EACAQ,aAAaE,QAAQ,UAE3BN,IAAKO,MAAMC,QAAUJ,aAAaE,QAAQ,WAAaV,EAGvDI,IAAKO,MAAME,iBAAiB,UAO5B,YAAmC,EAAVC,OAChBF,QACHX,EAAYD,EAAYA,GACxBC,EAAYD,EAAaA,M,yBCxBZe,G,qBACnB,cAA8C,IAAhCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAClCC,KAAKH,SAAWA,EAChBG,KAAKF,WAAaA,EAClBE,KAAKD,OAASA,E,2BAEhBE,MAAA,WAAQ,WACND,KAAKE,aACLC,aAAY,WACV,EAAKD,eACJ,M,EAELE,IAAA,SAAIC,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAEnCC,QAAA,SAAQH,GACN,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAEnCE,kBAAA,SAAkBC,GAQhB,MAAO,CAAEC,KAPIX,KAAKQ,QAAQI,KAAKC,MAAMH,EAAO,QAO7BI,MANDd,KAAKI,IACjBQ,KAAKC,MAAOH,EAAO,MAAR,OAKSK,KAHTf,KAAKI,IAAIQ,KAAKC,MAAOH,EAAO,KAAR,MAGLM,KAFfhB,KAAKI,IAAIQ,KAAKC,MAAOH,EAAO,IAAe,Q,EAI1DR,WAAA,WACE,IAEMe,EAFYjB,KAAKF,WAAWoB,UACdC,KAAKC,MAEnBV,EAAOV,KAAKS,kBAAkBQ,GACpCjB,KAAKD,OAAOW,I,MCvBd,IAAMW,EAAQC,MACdrC,IAAKsC,eAAeC,mBAAmB,aAAcH,GAExC,IAAIzB,EAAe,CAC5BC,SAAU,WACVC,WAAY,IAAIqB,KAAK,gBACrBpB,OAZN,YAAsD,IAA3BY,EAA2B,EAA3BA,KAAMG,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAC1C/B,IAAKwC,QAAQC,UAAb,SAAkCf,EAAlC,UACA1B,IAAK0C,UAAUD,UAAf,SAAoCZ,EAApC,UACA7B,IAAK2C,SAASF,UAAd,SAAmCX,EAAnC,UACA9B,IAAK4C,SAASH,UAAd,SAAmCV,EAAnC,aAWOf,S,mBCnBH,IAAMf,EAAO4C,SAASC,cAAc,QAC9BvC,EAAQsC,SAASC,cAAc,yBAC/BN,EAAUK,SAASC,cAAc,uBACjCJ,EAAYG,SAASC,cAAc,wBACnCH,EAAWE,SAASC,cAAc,uBAClCF,EAAWC,SAASC,cAAc,uBAClCR,EAAiBO,SAASC,cAAc,UAE9C1D,EAAOC,QAAU,CACbY,OACAM,QACAiC,UACAG,WACAC,WACAN,iBACAI,e","file":"main.d448a946bc3ae2dee15c.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<em class=\\\"clock\\\"></em>\\r\\n\\r\\n\";\n},\"useData\":true});","import refs from './refs'; \r\n   const Theme = {\r\n    LIGHT: 'light-theme',\r\n    DARK: 'dark-theme',\r\n  };\r\n\r\n  refs.body.classList.add(\r\n    localStorage.getItem('theme') === null\r\n      ? Theme.LIGHT\r\n      : localStorage.getItem('theme'),\r\n  );\r\n  refs.input.checked = localStorage.getItem('theme') === Theme.DARK;\r\n  \r\n  \r\n  refs.input.addEventListener('change', inputChangeOn);\r\n  \r\n  function changeTheme(add, rem) {\r\n    refs.body.classList.replace(rem, add);\r\n    localStorage.setItem('theme', add);\r\n  }\r\n  \r\n  function inputChangeOn({ target }) {\r\n    target.checked\r\n      ? changeTheme(Theme.DARK, Theme.LIGHT)\r\n      : changeTheme(Theme.LIGHT, Theme.DARK);\r\n  } \r\n","export default class CountdownTimer {\r\n  constructor({ selector, targetDate, onTick }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    this.onTick = onTick;\r\n  }\r\n  start() {\r\n    this.updateTime();\r\n    setInterval(() => {\r\n      this.updateTime();\r\n    }, 1000);\r\n  }\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n  padDays(value) {\r\n    return String(value).padStart(3, '0');\r\n  }\r\n  getTimeComponents(time) {\r\n    const days = this.padDays(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n  updateTime() {\r\n    const finalDate = this.targetDate.getTime();\r\n    const currentTime = Date.now();\r\n    const velTime = finalDate - currentTime;\r\n    const time = this.getTimeComponents(velTime);\r\n    this.onTick(time);\r\n  }\r\n}\r\n\r\n// ------------------------------option without class-----------------------------------------------\r\n// function pad(value) {\r\n//   return String(value).padStart(2, '0');\r\n// }\r\n// function padDays(value) {\r\n//   return String(value).padStart(3, '0');\r\n// }\r\n// function getTimeComponents(time) {\r\n//   const days = padDays(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n//   const hours = pad(\r\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n//   );\r\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n//   return { days, hours, mins, secs };\r\n// }\r\n// const refs = {\r\n//   spanDay: document.querySelector('[data-value=\"days\"]'),\r\n//   spanHours: document.querySelector('[data-value=\"hours\"]'),\r\n//   spanMins: document.querySelector('[data-value=\"mins\"]'),\r\n//   spanSecs: document.querySelector('[data-value=\"secs\"]'),\r\n// };\r\n// const timer = {\r\n//   start(date) {\r\n//     updateTime(date);\r\n//     setInterval(() => {\r\n//       updateTime(date);\r\n//     }, 1000);\r\n//   },\r\n// };\r\n// timer.start('Jul 17, 2021');\r\n// function updateTime(dateSale) {\r\n//   const finalDate = new Date(dateSale).getTime();\r\n//   const currentTime = Date.now();\r\n//   const velTime = finalDate - currentTime;\r\n//   const time = getTimeComponents(velTime);\r\n//   updateClockface(time);\r\n// }\r\n// function updateClockface({ days, hours, mins, secs }) {\r\n//   refs.spanDay.textContent = `${days}`;\r\n//   refs.spanHours.textContent = `${hours}`;\r\n//   refs.spanMins.textContent = `${mins}`;\r\n//   refs.spanSecs.textContent = `${secs}`;\r\n// }\r\n//--------------------------------------for educational purposes----------------------------------------------\r\n","import refs from './refs';\r\nimport timeClock from '../templates/tеmplate-clock.hbs';\r\nimport CountdownTimer from './timer'\r\n\r\nfunction updateClockface({ days, hours, mins, secs }) {\r\n    refs.spanDay.innerHTML = `<span>${days}</span>`;\r\n    refs.spanHours.innerHTML = `<span>${hours}</span>`;\r\n    refs.spanMins.innerHTML = `<span>${mins}</span>`;\r\n    refs.spanSecs.innerHTML = `<span>${secs}</span>`;\r\n  }\r\n  const clock = timeClock()\r\n  refs.timerContainer.insertAdjacentHTML('afterbegin', clock)\r\n  \r\n  const time = new CountdownTimer({\r\n      selector: '#timer-1',\r\n      targetDate: new Date('Jul 17, 2021'),\r\n      onTick: updateClockface\r\n    });\r\n    \r\n      time.start()","        const body = document.querySelector('body');\r\n        const input = document.querySelector('.theme-switch__toggle');\r\n        const spanDay = document.querySelector('[data-value=\"days\"]');\r\n        const spanHours = document.querySelector('[data-value=\"hours\"]');\r\n        const spanMins = document.querySelector('[data-value=\"mins\"]');\r\n        const spanSecs = document.querySelector('[data-value=\"secs\"]');\r\n        const timerContainer = document.querySelector('.timer');\r\n      \r\n        module.exports = {\r\n            body,\r\n            input,\r\n            spanDay,\r\n            spanMins,\r\n            spanSecs,\r\n            timerContainer,\r\n            spanHours,\r\n          };"],"sourceRoot":""}